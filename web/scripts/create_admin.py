import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
ROOT_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(ROOT_DIR))

from db import get_session
from db.models import AdminUser
from tools import PasswordHasher


async def create_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""

    print("=" * 60)
    print("üîê –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏")
    print("=" * 60)
    print()

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    username = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    if not username:
        print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    email = input("Email: ").strip()
    if not email:
        print("‚ùå Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    password = input("–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ").strip()
    if len(password) < 6:
        print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    password_confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
    if password != password_confirm:
        print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return

    full_name = input("–ü–æ–ª–Ω–æ–µ –∏–º—è: ").strip()
    if not full_name:
        print("‚ùå –ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    # –†–æ–ª—å
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:")
    print("1. admin - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")
    print("2. editor - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    role_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2) [2]: ").strip()
    role = "admin" if role_choice == "1" else "editor"

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active_input = input("\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É? (y/n) [y]: ").strip().lower()
    is_active = is_active_input != 'n'

    # –°–æ–∑–¥–∞–µ–º –≤ –ë–î
    async for session in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        from sqlalchemy import select
        result = await session.execute(
            select(AdminUser).where(AdminUser.username == username)
        )
        existing = result.scalar_one_or_none()

        if existing:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à –∫–ª–∞—Å—Å
        hashed_password = PasswordHasher.hash_password(password)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        admin = AdminUser(
            username=username,
            email=email,
            full_name=full_name,
            password_hash=hashed_password,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ password, –∞ –Ω–µ password_hash
            role=role,
            is_active=is_active
        )

        session.add(admin)
        await session.commit()

        print()
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print()
        print("üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print(f"   –õ–æ–≥–∏–Ω: {username}")
        print(f"   Email: {email}")
        print(f"   –†–æ–ª—å: {role}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if is_active else '‚è≥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}")
        print()
        if is_active:
            print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000/auth/login")
        else:
            print("‚ö†Ô∏è  –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        print()

        break


if __name__ == "__main__":
    try:
        asyncio.run(create_admin())
    except KeyboardInterrupt:
        print("\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()